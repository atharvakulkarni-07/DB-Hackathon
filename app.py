# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H9Py83YyFe7vmdrvo3zPuJYNLvfDBZEn
"""

import gradio as gr
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go
import warnings

# Suppress warnings
warnings.filterwarnings('ignore')

# Function to download stock data for the last 5 years
def download_stock_data(ticker):
    stock_data = yf.Ticker(ticker)
    df = stock_data.history(period="5y")[['Close']]
    return df

# Function to calculate Bollinger Bands
def calculate_bollinger_bands(df, window, no_of_stds):
    rolling_mean = df['Close'].rolling(window=window).mean()
    rolling_std = df['Close'].rolling(window=window).std()
    df['Bollinger High'] = rolling_mean + (rolling_std * no_of_stds)
    df['Bollinger Low'] = rolling_mean - (rolling_std * no_of_stds)
    return df

# Function to detect anomalies based on Bollinger Bands
def detect_anomalies(df):
    anomalies = (df['Close'] > df['Bollinger High']) | (df['Close'] < df['Bollinger Low'])
    return anomalies

# Function to plot the stock data with Bollinger Bands and anomalies
def plot_stock(ticker, window, no_of_stds):
    df = download_stock_data(ticker)
    df_with_bands = calculate_bollinger_bands(df, window, no_of_stds)
    anomalies = detect_anomalies(df_with_bands)
    df_with_bands['Anomaly'] = anomalies

    # Create the Plotly figure
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df_with_bands.index, y=df_with_bands['Close'],
                             mode='lines', name='Close Price'))
    fig.add_trace(go.Scatter(x=df_with_bands.index, y=df_with_bands['Bollinger High'],
                             line=dict(width=1), name='Bollinger High'))
    fig.add_trace(go.Scatter(x=df_with_bands.index, y=df_with_bands['Bollinger Low'],
                             line=dict(width=1), name='Bollinger Low'))
    fig.add_trace(go.Scatter(x=df_with_bands.index,
                             y=df_with_bands['Close'].where(df_with_bands['Anomaly']),
                             mode='markers', name='Anomaly', marker=dict(color='red', size=8)))

    fig.update_layout(title=f'Bollinger Bands and Anomalies for {ticker}',
                      xaxis_title='Date', yaxis_title='Price', height=600)
    return fig

# Gradio interface with more companies and options
iface = gr.Interface(
    fn=plot_stock,
    inputs=[
        gr.Dropdown(
            [
                'AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA',  # Tech companies
                'META', 'NFLX', 'NVDA', 'INTC', 'ORCL',  # Tech/Media/Hardware
                'JPM', 'BAC', 'GS', 'WFC', 'C',  # Banking and Finance
                'XOM', 'CVX', 'BP', 'TOT', 'SHEL',  # Energy companies
                'PFE', 'JNJ', 'MRNA', 'BNTX', 'AZN'  # Pharmaceuticals
            ],
            label="Select Stock Ticker"
        ),
        gr.Slider(minimum=5, maximum=100, value=20, label="Window Size for SMA"),
        gr.Slider(minimum=1, maximum=3, value=2, step=0.1, label="Number of Standard Deviations")
    ],
    outputs="plot",
    title="Stock Anomaly Detection with Bollinger Bands",
    description="Select a stock ticker and adjust the window size and standard deviations to view Bollinger Bands and anomalies.",
    theme=gr.themes.Soft()  # Optional theme for better visuals
)

# Launch the app
if __name__ == "__main__":
    iface.launch()
